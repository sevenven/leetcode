数据结构与算法的朴素理解：
	使用顺序、分支、迭代、递归在特定的数据结构上实现特定的逻辑

切题四件套
Clarification
Possible solutions
Coding
Test cases

五遍刷题法
刷题第一遍
	5分钟(10到15分钟也可)：读题+思考
	如果无思路-->直接看解法：注意！多解法，比较优劣
	背诵 默写好的解法
第二遍
	马上自己写-->LeetCode提交
	多种解法比较、体会-->优化！
第三遍
	一天之后 重做一遍
	LeetCode国际站看most votes自己使用语言的前三回答
	不同解法的熟练程度-->专项练习
第四遍
	过了一周：再回来练习一遍
	LeetCode国际站看most votes自己使用语言的前三回答
	不同解法的熟练程度-->专项练习
第五遍
	面试前一周恢复性训练

tips:
做不出来的题目不要纠结，直接去看题解和most votes---不会做很正常




第二周：
哈希表/散列表
底层存储结构：数组
通过哈希/散列函数将每个key映射到数组中的一个位置
使用不同的key通过散列函数计算出来的散列值可能会相同 这个叫散列冲突 散列冲突几乎无法避免
散列表的装载因子 = 填入表中的元素个数 / 散列表的长度
散列冲突解决办法：
1.开放寻址法
2.链表法
查询/添加/删除时间复杂度O(1)
常见使用哈希表的库 Map Set

树
二叉树：每个节点都只最多只有两个节点的树
树的三种遍历方式：
前序遍历：根-左-右
中序遍历：左-根-右
后序遍历：左-右-根
二叉搜索树：
左子树的所有结点的值小于它的根节点的值
右子树的所有结点的值大于它的根节点的值
中序遍历：升序排列
查询、插入、删除时间复杂度O(logn)
树的遍历在代码实现方面主要使用递归

递归：
可以将问题分解成与它数据规模不同 但是求解思路完全一样一个或多个子问题
递归可以细分为 泛型递归 分治 回溯等
递归一定要存在递归终止条件
要找递推公式 而不要一层一层的人脑暴力递归
递归编写模板
1.递归终止条件
2.当前递归的处理逻辑
3.向递归终止条件靠近
4.处理递归返回的结果(需要的话)
5.可能会处理恢复当前state(需要的话)
分治/回溯：
递归的细分
分治是将一个问题分解成几个数据不重复的子问题
回溯 利用递归特点 列举每一种可能 一种可能走完之后 退回上一步 走上一步的另一种可能 直到走完所有可能 退回起点为止

第三周：
搜索/遍历：每个节点要且仅要访问一次
DFS：Depth First Search/深度优先搜索
实现方式：递归、栈
递归实现方式js代码模板(其实就是前序遍历)
visited = new Set()
function dfs(node) {
	if(visited.has(node)) return
	visited.add(node)
	// 在此处写处理当前节点的逻辑
	for (child of node.children)
		dfs(child)
}
栈实现方式js代码模板(其实就是前序遍历)
function dfs(node) {
	var stack = [],
		visited = new Set();
	stack.push(node);
	while (stack.length > 0) {
		var cur = stack.pop();
		visited.add(cur);
		// 在此处写处理当前节点的逻辑
		var length = cur.children.length;
		for (var i = length - 1; i >= 0; i--) 
			queue.push(cur.children[i])
	}
}
BFS：Breadth First Search/广度优先搜索
实现方式：队列
js代码模板：
function bfs(node) {
	var queue = [],
		visited = new Set();
	queue.push(node);
	while (queue.length > 0) {
		var cur = queue.shift();
		if (visited.has(cur)) continue;
		visited.add(cur);
		// 在此处写处理当前节点的逻辑
		for (child of cur.children) 
			queue.push(child)
	}
	return visited;
}

贪心算法
贪心算法是一种在每一步选择中都采取在当前状态下最好或最优的选择，从而希望导致结果全局最好或最优的算法，
贪心算法对每个子问题的解决方案都做出选择，不能回退

二分查找
前提：
单调递增或递减
存在上下界
能够通过索引访问

单调递增代码模板
var left = 0,
		right = arr.length - 1
while (left <= right) {
	mid = left + Math.floor((right - left) / 2)
	if (arr[mid] === target) break or return result
	else if (arr[mid] < target) left = mid + 1
	else right = mid - 1;
}
return left;

动态规划会保存以前的运算结果 并根据以前的运算结果对当前进行选择 有回退功能
贪心：当下做局部最优判断
回溯：能够回退
动态规划：最优判断 + 回退

动态规划
	动态规划和递归或者分治没有本质上的区别
	共性：找到重复子问题
	差异性：最优子结构 中途可以淘汰次优解

	动态规划关键点
	1.最优子结构
	2.存储中间状态
	3.递推公式(DP方程)

	动态规划小结：打破自己的思维习惯、理解复杂逻辑的关键

第六周

字典树
典型应用：排序和统计大量的字符串 经常被搜索引擎用域文本词频统计
优点：最大限度减少无谓的字符串比较 查询效率比哈希表高
基本性质：
	节点本身不存完整字符串
	从根节点到某一结点 路径上经过的字符连接起来 为该节点的字符串
	每个结点的所有子节点路径代表的字符都不相同

并查集
判断两个元素是否在同一个群组里
使用场景：组团 配对问题
基本操作 makeSet(s) unionSet(x,y) find(x)

搜索
1.朴素搜索
2.优化方式：不重复(fibonacci) 剪枝
3.DFS BFS 双向搜索 
4.启发式搜索(A*搜索)
定义：是一种告知搜索方向的方法，提供了一种明智的方法来猜测哪个邻居节点会导向一个目标
基于BFS的搜索
普通队列 --》 优先队列
重点在于启发式函数(估价函数/优先级函数)：它用来评价哪些节点最有希望是我们要找的那一个节点

平衡二叉搜索树
保证性能：左右子树节点平衡
平衡因子：左子树高度-右子树高度
AVL树：(严格平衡二叉树)
	通过旋转操作进行平衡(左旋 右旋 左右旋 右左旋)
	不足：节点需要存储额外信息 且调整次数频繁
红黑树：(近似平衡二叉树)
	任何一个节点左右子树高度差小于两倍
	每个节点要么是红色，要么是黑素
	根节点是黑色
	每个叶节点是黑色
	不能有相邻接的两个红色节点
	从仁义节点到其每个叶子的所有路径都包含相同数目的黑色节点
对比：
AVL树提供了更快的查询
红黑树提供了更快的插入和删除操作
AVL树需要更多的额外空间

第七周
位运算
位运算符
左  移  << 0011 => 0110
右  移  >> 0110 => 0011
按位或  |  0011|1011 => 1011
按位与	&  0011&1011 => 0011
按位取反 ~ 0011 => 1100
按位异或 ^ 0011^1011 => 1000
异或操作的一些特点
	X ^ 0 = x
	x ^ x = 0
	x ^ 1s =~x
	x ^ (~x) = 1s
	c = a ^ b; b = a ^ c; a = b ^ c // 交换两个数
	a^ b ^c = a ^( b ^ c) = ( a ^ b) ^ c // 结合律
位运算常见操作
1.将x最右边的n位清零: x&(1<<(n-1))
2.获取x的第n位: (x>>n)&1
3.获取x的第n位的幂值: x&(1<<(n-1))
4.仅将第n位置为1: x|(1<<n) 
5.仅将第n位置为0: x&(~(1<<n))
6.将x最高位至第n位(含)清零: x&((1<<n)-1)
7.将x第n位至第0位(含)清零: x&(~(1<<(n+1))-1)
实战要点
判断奇偶
x%2==1 --> (x&1)==1
x%2==0 --> (x&1)==0
x/2 --> x>>1
x=x&(x-1)清零最低位的1
x&-x 得到最低位的1
x&~x=0

布隆过滤器(Bloom Filter)
一个很长的二进制向量和一系列随机映射函数。
布隆过滤器可以用域检索一个元素是否在一个集合中
优点：空间效率和查询时间都远远超过一般的算法
缺点：一定的误识别率和删除困难

LRU Cache
最近最少使用策略

排序
1.比较类排序
通过比较来决定元素间的相对次序
时间复杂度不能突破O(nlogn)
也叫做非线性时间比较类排序
O(n^2)
冒泡排序
插入排序
选择排序
O(n^1.3)
希尔排序
O(nlogn)
快速排序
归并排序
堆排序
2.非比较类排序
不通过比较来决定元素间的相对次序
可以突破基于比较的时间下界 以线性时间运行
也叫线性时间非比较类排序
O(n)
计数排序
桶排序
基数排序
